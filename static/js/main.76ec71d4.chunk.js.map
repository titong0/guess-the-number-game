{"version":3,"sources":["algorithms.ts","components/NumberHint.tsx","components/Game.tsx","App.tsx","index.tsx"],"names":["compareNumbers","numberToGuess","generatedNumber","toGuessDigits","split","generatedDigits","correctPlace","correctButMisplaced","digit","includes","indexOf","formatHint","genNumber","currentNum","Set","size","add","genRandom","toString","join","min","max","Math","floor","random","message","Hint","number","num1","num2","num3","className","Game","useState","setNumberToGuess","hints","setHints","userGuess","setUserGuess","displayNumber","toggleDisplayNumber","style","fontSize","map","i","index","onClick","newNum","prevArray","push","type","placeholder","onChange","e","target","value","alert","href","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76ec71d4.chunk.js","sourcesContent":["const compareNumbers = (\r\n  numberToGuess: string,\r\n  generatedNumber: string\r\n): string => {\r\n  const toGuessDigits = numberToGuess.split(\"\");\r\n  const generatedDigits = generatedNumber.split(\"\");\r\n\r\n  let correctPlace = 0;\r\n  let correctButMisplaced = 0;\r\n\r\n  for (let digit of generatedDigits) {\r\n    if (toGuessDigits.includes(digit)) {\r\n      if (toGuessDigits.indexOf(digit) === generatedDigits.indexOf(digit)) {\r\n        correctPlace++;\r\n      } else {\r\n        correctButMisplaced++;\r\n      }\r\n    }\r\n  }\r\n\r\n  return formatHint(correctPlace, correctButMisplaced);\r\n};\r\n\r\n// this generates a number with 3 diferent digits\r\nconst genNumber = (): string => {\r\n  let currentNum = new Set();\r\n  while (currentNum.size < 3) {\r\n    currentNum.add(genRandom(1, 9).toString());\r\n  }\r\n  return [...currentNum].join(\"\");\r\n};\r\n\r\nconst genRandom = (min: number, max: number): number => {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\n\r\nconst formatHint = (\r\n  correctPlace: number,\r\n  correctButMisplaced: number\r\n): string => {\r\n  let message = \"\";\r\n\r\n  if (!correctPlace && !correctButMisplaced) {\r\n    return \"no numbers are correct\";\r\n  } else {\r\n    if (correctPlace === 1) {\r\n      message += `1 number is correct `;\r\n    } else if (correctPlace > 1) {\r\n      message += `${correctPlace} numbers are correct `;\r\n    }\r\n    if (correctButMisplaced === 1) {\r\n      message += `1 number is misplaced`;\r\n    } else if (correctButMisplaced > 1) {\r\n      message += `${correctButMisplaced} numbers are misplaced`;\r\n    }\r\n  }\r\n  return message;\r\n};\r\n\r\nexport { compareNumbers, genNumber, genRandom };\r\n","import { compareNumbers } from \"../algorithms\";\r\n\r\nexport interface NumberHintProps {\r\n  numberToGuess: string;\r\n  number: string;\r\n}\r\nconst Hint: React.FC<NumberHintProps> = ({ numberToGuess, number }) => {\r\n  const [num1, num2, num3] = number.split(\"\");\r\n\r\n  return (\r\n    <div className=\"number-hint\">\r\n      <div className=\"numbers\">\r\n        <div>{num1}</div>\r\n        <div>{num2}</div>\r\n        <div>{num3}</div>\r\n      </div>\r\n      <div className=\"number-info\">{compareNumbers(numberToGuess, number)}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Hint;\r\n","import { useState } from \"react\";\r\nimport { genNumber } from \"../algorithms\";\r\nimport Hint from \"./NumberHint\";\r\n\r\nconst Game: React.FC = () => {\r\n  const [numberToGuess, setNumberToGuess] = useState(genNumber());\r\n  const [hints, setHints] = useState([genNumber(), genNumber(), genNumber()]);\r\n  const [userGuess, setUserGuess] = useState(\"\");\r\n  const [displayNumber, toggleDisplayNumber] = useState(false);\r\n\r\n  const addHint = () => {\r\n    let newNum = genNumber();\r\n    while (true) {\r\n      if (hints.includes(newNum)) {\r\n        newNum = genNumber();\r\n      } else break;\r\n    }\r\n\r\n    const prevArray = [...hints];\r\n    prevArray.push(newNum);\r\n    setHints(prevArray);\r\n  };\r\n\r\n  const newNumber = (): void => {\r\n    setNumberToGuess(genNumber());\r\n    setHints([genNumber(), genNumber(), genNumber()]);\r\n  };\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setUserGuess(e.target.value);\r\n  };\r\n  const validate = () => {\r\n    if (userGuess === numberToGuess) {\r\n      alert(\"correct\");\r\n      toggleDisplayNumber(true);\r\n    } else {\r\n      alert(\"incorrect\");\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"game-container\">\r\n      <span style={{fontSize: \"1.5rem\"}} >can you guess the combination?</span>\r\n\r\n      <div className=\" example numbers\">\r\n        <div>?</div>\r\n        <div>?</div>\r\n        <div>?</div>\r\n      </div>\r\n      <div className=\"hints-container\">\r\n        {hints.map((i, index) => {\r\n          return (\r\n            <Hint\r\n              key={hints[index]}\r\n              numberToGuess={numberToGuess}\r\n              number={hints[index]}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n      <button className=\"game-buttons\" onClick={addHint}>\r\n        New Hint\r\n      </button>\r\n      <div className=\"game-options\">\r\n        <input\r\n          className=\"game-buttons\"\r\n          type=\"text\"\r\n          placeholder=\"The number is\"\r\n          onChange={handleChange}\r\n        />\r\n        <button className=\"game-buttons\" onClick={validate}>\r\n          Check\r\n        </button>\r\n        <button className=\"game-buttons\" onClick={newNumber}>\r\n          New game\r\n        </button>\r\n        <button\r\n          className=\"game-buttons\"\r\n          onClick={() => toggleDisplayNumber(!displayNumber)}\r\n        >\r\n          Reveal number\r\n        </button>\r\n        {displayNumber ? (\r\n          <div className=\"number-reveal\">the number is {numberToGuess}</div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <br />\r\n        <a\r\n          href=\"https://github.com/titong0/guess-the-number-game\"\r\n          target=\"_blank\"\r\n        >\r\n          Github\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React from \"react\";\r\nimport Game from \"./components/Game\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Game />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport \"./app.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}